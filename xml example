#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <openssl/evp.h>

// Define a simple data structure
struct Person {
    char name[50];
    int age;
};

// Function to encrypt data using OpenSSL
int encryptData(const unsigned char *plaintext, int plaintext_len, unsigned char *key,
                unsigned char *iv, unsigned char **ciphertext) {
    EVP_CIPHER_CTX *ctx;

    // Create and initialize the context
    ctx = EVP_CIPHER_CTX_new();
    EVP_EncryptInit_ex(ctx, EVP_aes_256_cbc(), NULL, key, iv);

    // Allocate memory for ciphertext
    *ciphertext = (unsigned char *)malloc(plaintext_len + EVP_CIPHER_CTX_block_size(ctx));
    if (*ciphertext == NULL) {
        return 0; // Memory allocation failed
    }

    // Perform encryption
    int len;
    EVP_EncryptUpdate(ctx, *ciphertext, &len, plaintext, plaintext_len);
    int ciphertext_len = len;
    EVP_EncryptFinal_ex(ctx, *ciphertext + len, &len);
    ciphertext_len += len;

    // Clean up
    EVP_CIPHER_CTX_free(ctx);

    return ciphertext_len;
}

// Function to decrypt data using OpenSSL
int decryptData(unsigned char *ciphertext, int ciphertext_len, unsigned char *key,
                unsigned char *iv, unsigned char **plaintext) {
    EVP_CIPHER_CTX *ctx;

    // Create and initialize the context
    ctx = EVP_CIPHER_CTX_new();
    EVP_DecryptInit_ex(ctx, EVP_aes_256_cbc(), NULL, key, iv);

    // Allocate memory for plaintext
    *plaintext = (unsigned char *)malloc(ciphertext_len);
    if (*plaintext == NULL) {
        return 0; // Memory allocation failed
    }

    // Perform decryption
    int len;
    EVP_DecryptUpdate(ctx, *plaintext, &len, ciphertext, ciphertext_len);
    int plaintext_len = len;
    EVP_DecryptFinal_ex(ctx, *plaintext + len, &len);
    plaintext_len += len;

    // Clean up
    EVP_CIPHER_CTX_free(ctx);

    return plaintext_len;
}

// Function to serialize a Person struct to binary file
void serializeToFile(struct Person person, const char *filename, unsigned char *key, unsigned char *iv) {
    // Encrypt the data
    unsigned char plaintext[sizeof(struct Person)];
    memcpy(plaintext, &person, sizeof(struct Person));
    unsigned char *ciphertext = NULL;
    int ciphertext_len = encryptData(plaintext, sizeof(struct Person), key, iv, &ciphertext);
    if (ciphertext_len == 0) {
        printf("Error: Encryption failed.\n");
        return;
    }

    // Write the encrypted data to the file
    FILE *file = fopen(filename, "wb");
    if (file != NULL) {
        fwrite(ciphertext, ciphertext_len, 1, file);
        fclose(file);
    } else {
        printf("Error: Unable to open file for writing.\n");
    }

    // Free dynamically allocated memory
    free(ciphertext);
}

// Function to deserialize a Person struct from binary file
struct Person deserializeFromFile(const char *filename, unsigned char *key, unsigned char *iv) {
    struct Person person;

    // Read the encrypted data from the file
    FILE *file = fopen(filename, "rb");
    if (file != NULL) {
        fseek(file, 0, SEEK_END);
        long file_size = ftell(file);
        fseek(file, 0, SEEK_SET);

        unsigned char *ciphertext = (unsigned char *)malloc(file_size);
        if (ciphertext == NULL) {
            printf("Error: Memory allocation failed.\n");
            fclose(file);
            return person; // Return empty struct on error
        }

        fread(ciphertext, file_size, 1, file);
        fclose(file);

        // Decrypt the data
        unsigned char *plaintext = NULL;
        int plaintext_len = decryptData(ciphertext, file_size, key, iv, &plaintext);
        if (plaintext_len == 0) {
            printf("Error: Decryption failed.\n");
            free(ciphertext);
            return person; // Return empty struct on error
        }

        // Reconstruct the Person struct
        memcpy(&person, plaintext, sizeof(struct Person));

        // Free dynamically allocated memory
        free(ciphertext);
        free(plaintext);
    } else {
        printf("Error: Unable to open file for reading.\n");
    }

    return person;
}

int main() {
    // Create a Person object
    struct Person john = {"John Doe", 30};

    // Encryption key and initialization vector (IV)
    unsigned char key[EVP_MAX_KEY_LENGTH] = "01234567890123456789012345678901"; // 32-byte key
    unsigned char iv[EVP_MAX_IV_LENGTH] = "0123456789012345"; // 16-byte IV

    // Serialize the Person object to a binary file
    serializeToFile(john, "person.dat", key, iv);

    // Deserialize the Person object from the binary file
    struct Person retrievedPerson = deserializeFromFile("person.dat", key, iv);

    // Use the retrieved Person object
    printf("Retrieved Person:\n");
    printf("Name: %s\n", retrievedPerson.name);
    printf("Age: %d\n", retrievedPerson.age);

    return 0;
}