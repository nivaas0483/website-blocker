// Function to serialize the linked list and save it to a file (sorted mode)
void serializeAndSaveSorted(struct Node* head, const char* filename, unsigned char* key, unsigned char* iv) {
    FILE* file = fopen(filename, "wb");
    if (file == NULL) {
        printf("Error opening file for writing\n");
        return;
    }

    struct Node* current = head;
    while (current != NULL) {
        unsigned char plaintext[sizeof(int)];
        memcpy(plaintext, &(current->data), sizeof(int));
        unsigned char ciphertext[sizeof(int) + EVP_MAX_BLOCK_LENGTH];
        encrypt(plaintext, sizeof(int), key, iv, ciphertext);
        fwrite(ciphertext, sizeof(unsigned char), sizeof(int) + EVP_MAX_BLOCK_LENGTH, file);
        current = current->next;
    }

    fclose(file);
}

// Function to deserialize the linked list from a file (sorted mode)
struct Node* deserializeFromFileSorted(const char* filename, unsigned char* key, unsigned char* iv) {
    FILE* file = fopen(filename, "rb");
    if (file == NULL) {
        printf("Error opening file for reading\n");
        return NULL;
    }

    struct Node* head = NULL;
    struct Node* tail = NULL;
    unsigned char ciphertext[sizeof(int) + EVP_MAX_BLOCK_LENGTH];
    while (fread(ciphertext, sizeof(unsigned char), sizeof(int) + EVP_MAX_BLOCK_LENGTH, file) != 0) {
        unsigned char plaintext[sizeof(int)];
        decrypt(ciphertext, sizeof(int) + EVP_MAX_BLOCK_LENGTH, key, iv, plaintext);
        int data;
        memcpy(&data, plaintext, sizeof(int));
        struct Node* newNode = createNode(data);
        if (head == NULL) {
            head = newNode;
            tail = newNode;
        } else {
            tail->next = newNode;
            tail = tail->next;
        }
    }

    fclose(file);
    return head;
}