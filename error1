#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>
#include <openssl/conf.h>
#include <openssl/evp.h>
#include <openssl/err.h>

#define KEY_SIZE 32
#define IV_SIZE 16

// Function to encrypt data
void encrypt(const unsigned char *plaintext, int plaintext_len, unsigned char *key,
             unsigned char *iv, unsigned char *ciphertext) {
    EVP_CIPHER_CTX *ctx = EVP_CIPHER_CTX_new();
    int len;
    int ciphertext_len;

    EVP_EncryptInit_ex(ctx, EVP_aes_256_cbc(), NULL, key, iv);
    EVP_EncryptUpdate(ctx, ciphertext, &len, plaintext, plaintext_len);
    ciphertext_len = len;
    EVP_EncryptFinal_ex(ctx, ciphertext + len, &len);
    ciphertext_len += len;

    EVP_CIPHER_CTX_free(ctx);
}

// Function to decrypt data
void decrypt(unsigned char *ciphertext, int ciphertext_len, unsigned char *key,
             unsigned char *iv, unsigned char *plaintext) {
    EVP_CIPHER_CTX *ctx = EVP_CIPHER_CTX_new();
    int len;
    int plaintext_len;

    EVP_DecryptInit_ex(ctx, EVP_aes_256_cbc(), NULL, key, iv);
    EVP_DecryptUpdate(ctx, plaintext, &len, ciphertext, ciphertext_len);
    plaintext_len = len;
    EVP_DecryptFinal_ex(ctx, plaintext + len, &len);
    plaintext_len += len;

    EVP_CIPHER_CTX_free(ctx);
}

// Node structure
struct Node {
    int data;
    struct Node* next;
};

// Function to create a new node
struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    if (newNode == NULL) {
        printf("Memory allocation failed\n");
        exit(EXIT_FAILURE);
    }
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

// Function to print the linked list
void printList(struct Node* head) {
    struct Node* temp = head;
    while (temp != NULL) {
        printf("%d ", temp->data);
        temp = temp->next;
    }
    printf("\n");
}

// Function to serialize the linked list and save it to a file (sorted mode)
void serializeAndSaveSorted(struct Node* head, const char* filename, unsigned char* key, unsigned char* iv) {
    FILE* file = fopen(filename, "wb");
    if (file == NULL) {
        printf("Error opening file for writing\n");
        return;
    }

    struct Node* current = head;
    while (current != NULL) {
        unsigned char ciphertext[sizeof(int)];
        encrypt((const unsigned char *)&current->data, sizeof(int), key, iv, ciphertext);
        fwrite(ciphertext, sizeof(unsigned char), sizeof(int), file);
        current = current->next;
    }

    fclose(file);
}

// Function to deserialize the linked list from a file (sorted mode)
struct Node* deserializeFromFileSorted(const char* filename, unsigned char* key, unsigned char* iv) {
    FILE* file = fopen(filename, "rb");
    if (file == NULL) {
        printf("Error opening file for reading\n");
        return NULL;
    }

    struct Node* head = NULL;
    struct Node* tail = NULL;
    unsigned char ciphertext[sizeof(int)];
    while (fread(ciphertext, sizeof(unsigned char), sizeof(int), file) != 0) {
        int plaintext;
        decrypt(ciphertext, sizeof(int), key, iv, (unsigned char *)&plaintext);
        struct Node* newNode = createNode(plaintext);
        if (head == NULL) {
            head = newNode;
            tail = newNode;
        } else {
            tail->next = newNode;
            tail = tail->next;
        }
    }

    fclose(file);
    return head;
}

int main() {
    // Example usage
    unsigned char key[KEY_SIZE] = "01234567890123456789012345678901"; // 256-bit key
    unsigned char iv[IV_SIZE] = "0123456789012345"; // 128-bit IV

    // Sample linked list
    struct Node* head = createNode(1);
    head->next = createNode(2);
    head->next->next = createNode(3);

    // Serialize and save the linked list
    serializeAndSaveSorted(head, "sorted_data.dat", key, iv);

    // Deserialize and print the linked list
    struct Node* deserializedHead = deserializeFromFileSorted("sorted_data.dat", key, iv);
    printf("Deserialized linked list: ");
    printList(deserializedHead);

    return 0;
}