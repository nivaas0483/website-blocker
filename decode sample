#include <stdio.h>
#include <string.h>

// Define the structure for person information
struct Person {
    char name[20];
    int age;
    float height;
};

// Function to decode person information using CDR
void decode_person(const char *encoded_data, struct Person *person) {
    int offset = 0;

    // Decode name field (Type: 0x01)
    if (encoded_data[offset] == 0x01) {
        int name_length = encoded_data[offset + 1];
        memcpy(person->name, &encoded_data[offset + 2], name_length);
        person->name[name_length] = '\0';
        offset += 2 + name_length;
    }

    // Decode age field (Type: 0x02)
    if (encoded_data[offset] == 0x02) {
        int age_length = encoded_data[offset + 1];
        memcpy(&person->age, &encoded_data[offset + 2], age_length);
        offset += 2 + age_length;
    }

    // Decode height field (Type: 0x03)
    if (encoded_data[offset] == 0x03) {
        int height_length = encoded_data[offset + 1];
        memcpy(&person->height, &encoded_data[offset + 2], height_length);
        offset += 2 + height_length;
    }
}

int main(int argc, char *argv[]) {
    if (argc != 2) {
        printf("Usage: %s <encoded_data>\n", argv[0]);
        return 1;
    }

    const char *encoded_data = argv[1];
    struct Person decoded_person;

    // Decode the encoded data
    decode_person(encoded_data, &decoded_person);

    // Print the decoded person's information
    printf("Decoded Person Information:\n");
    printf("Name: %s\n", decoded_person.name);
    printf("Age: %d\n", decoded_person.age);
    printf("Height: %.1f\n", decoded_person.height);

    return 0;
}