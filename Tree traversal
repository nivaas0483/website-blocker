#include <stdio.h>
#include <stdlib.h>

// Define the structure for a binary tree node
struct node {
    int data;
    struct node* left;
    struct node* right;
};

// Function to create a new node with the given data
struct node* createNode(int data) {
    struct node* newNode = (struct node*)malloc(sizeof(struct node));
    newNode->data = data;
    newNode->left = NULL;
    newNode->right = NULL;
    return newNode;
}

// Function to perform inorder tree traversal (left, root, right)
void inorderTraversal(struct node* root) {
    if (root != NULL) {
        inorderTraversal(root->left);
        printf("%d ", root->data);
        inorderTraversal(root->right);
    }
}

// Function to perform preorder tree traversal (root, left, right)
void preorderTraversal(struct node* root) {
    if (root != NULL) {
        printf("%d ", root->data);
        preorderTraversal(root->left);
        preorderTraversal(root->right);
    }
}

// Function to perform postorder tree traversal (left, right, root)
void postorderTraversal(struct node* root) {
    if (root != NULL) {
        postorderTraversal(root->left);
        postorderTraversal(root->right);
        printf("%d ", root->data);
    }
}

int main() {
    // Input custom binary tree
    int rootData, leftData, rightData;
    printf("Enter data for root node: ");
    scanf("%d", &rootData);

    struct node* root = createNode(rootData);

    printf("Enter data for left child of root (Enter -1 if no left child): ");
    scanf("%d", &leftData);
    if (leftData != -1) {
        root->left = createNode(leftData);

        printf("Enter data for left child of left child (Enter -1 if no left child): ");
        scanf("%d", &leftData);
        if (leftData != -1) {
            root->left->left = createNode(leftData);
        }

        printf("Enter data for right child of left child (Enter -1 if no right child): ");
        scanf("%d", &rightData);
        if (rightData != -1) {
            root->left->right = createNode(rightData);
        }
    }

    printf("Enter data for right child of root (Enter -1 if no right child): ");
    scanf("%d", &rightData);
    if (rightData != -1) {
        root->right = createNode(rightData);

        printf("Enter data for left child of right child (Enter -1 if no left child): ");
        scanf("%d", &leftData);
        if (leftData != -1) {
            root->right->left = createNode(leftData);
        }

        printf("Enter data for right child of right child (Enter -1 if no right child): ");
        scanf("%d", &rightData);
        if (rightData != -1) {
            root->right->right = createNode(rightData);
        }
    }

    printf("\nInorder Traversal: ");
    inorderTraversal(root);

    printf("\nPreorder Traversal: ");
    preorderTraversal(root);

    printf("\nPostorder Traversal: ");
    postorderTraversal(root);

    return 0;
}