#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>
#include <openssl/conf.h>
#include <openssl/evp.h>
#include <openssl/err.h>

#define KEY_SIZE 32
#define IV_SIZE 16

// Function declarations
void handleErrors(void);
void encrypt(const unsigned char *plaintext, int plaintext_len, unsigned char *key, unsigned char *iv, unsigned char *ciphertext);
void decrypt(unsigned char *ciphertext, int ciphertext_len, unsigned char *key, unsigned char *iv, unsigned char *plaintext);
struct Node* createNode(int data);
void printList(struct Node* head);
void serializeAndSaveSorted(struct Node* head, const char* filename, unsigned char* key, unsigned char* iv);
struct Node* deserializeFromFileSorted(const char* filename, unsigned char* key, unsigned char* iv);
void insertSorted(struct Node** head, int data);
void deleteOccurrences(struct Node** head, int key);
void deleteAtPosition(struct Node** head, int position);
void insertAtBeginning(struct Node** head, int data);
void insertAtPosition(struct Node** head, int position, int data);
void insertAtEnd(struct Node** head, int data);

// Node structure
struct Node {
    int data;
    struct Node* next;
};

// Function to create a new node
struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    if (newNode == NULL) {
        printf("Memory allocation failed\n");
        exit(EXIT_FAILURE);
    }
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

// Function to print the linked list
void printList(struct Node* head) {
    struct Node* temp = head;
    while (temp != NULL) {
        printf("%d ", temp->data);
        temp = temp->next;
    }
    printf("\n");
}

// Function to handle OpenSSL errors
void handleErrors(void) {
    ERR_print_errors_fp(stderr);
    abort();
}

// Function to encrypt data
void encrypt(const unsigned char *plaintext, int plaintext_len, unsigned char *key,
             unsigned char *iv, unsigned char *ciphertext) {
    EVP_CIPHER_CTX *ctx;

    int len;
    int ciphertext_len;

    /* Create and initialize the context */
    if(!(ctx = EVP_CIPHER_CTX_new())) {
        printf("Encryption context creation failed.\n");
        handleErrors();
    }

    /* Initialize the encryption operation */
    if(1 != EVP_EncryptInit_ex(ctx, EVP_aes_256_cbc(), NULL, key, iv)) {
        printf("Encryption initialization failed.\n");
        handleErrors();
    }

    /* Provide the message to be encrypted, and obtain the encrypted output */
    if(1 != EVP_EncryptUpdate(ctx, ciphertext, &len, plaintext, plaintext_len)) {
        printf("Encryption update failed.\n");
        handleErrors();
    }
    ciphertext_len = len;

    /* Finalize the encryption */
    if(1 != EVP_EncryptFinal_ex(ctx, ciphertext + len, &len)) {
        printf("Encryption finalization failed.\n");
        handleErrors();
    }
    ciphertext_len += len;

    /* Clean up */
    EVP_CIPHER_CTX_free(ctx);
}

// Function to decrypt data
void decrypt(unsigned char *ciphertext, int ciphertext_len, unsigned char *key,
             unsigned char *iv, unsigned char *plaintext) {
    EVP_CIPHER_CTX *ctx;

    int len;
    int plaintext_len;

    /* Create and initialize the context */
    if(!(ctx = EVP_CIPHER_CTX_new())) {
        printf("Decryption context creation failed.\n");
        handleErrors();
    }

    /* Initialize the decryption operation */
    if(1 != EVP_DecryptInit_ex(ctx, EVP_aes_256_cbc(), NULL, key, iv)) {
        printf("Decryption initialization failed.\n");
        handleErrors();
    }

    /* Provide the message to be decrypted, and obtain the decrypted output */
    if(1 != EVP_DecryptUpdate(ctx, plaintext, &len, ciphertext, ciphertext_len)) {
        printf("Decryption update failed.\n");
        handleErrors();
    }
    plaintext_len = len;

    /* Finalize the decryption */
    if(1 != EVP_DecryptFinal_ex(ctx, plaintext + len, &len)) {
        printf("Decryption finalization failed.\n");
        handleErrors();
    }
    plaintext_len += len;

    /* Clean up */
    EVP_CIPHER_CTX_free(ctx);
}

// Function to serialize the linked list and save it to a file (sorted mode)
void serializeAndSaveSorted(struct Node* head, const char* filename, unsigned char* key, unsigned char* iv) {
    FILE* file = fopen(filename, "wb");
    if (file == NULL) {
        printf("Error opening file for writing\n");
        return;
    }

    struct Node* current = head;
    while (current != NULL) {
        unsigned char ciphertext[256];
        encrypt((const unsigned char *)&current->data, sizeof(int), key, iv, ciphertext);
        fwrite(ciphertext, sizeof(unsigned char), sizeof(int), file);
        current = current->next;
    }

    fclose(file);
}

// Function to deserialize the linked list from a file (sorted mode)
struct Node* deserializeFromFileSorted(const char* filename, unsigned char* key, unsigned char* iv) {
    FILE* file = fopen(filename, "rb");
    if (file == NULL) {
        printf("Error opening file for reading\n");
        return NULL;
    }

    struct Node* head = NULL;
    struct Node* tail = NULL;
    unsigned char ciphertext[256];
    while (fread(ciphertext, sizeof(unsigned char), sizeof(int), file) != 0) {
        int plaintext;
        decrypt(ciphertext, sizeof(int), key, iv, (unsigned char *)&plaintext);
        struct Node* newNode = createNode(plaintext);
        if (head == NULL) {
            head = newNode;
            tail = newNode;
        } else {
            tail->next = newNode;
            tail = tail->next;
        }
    }

    fclose(file);
    return head;
}

// Main function
int main() {
    // Your main function code here
    return 0;
}